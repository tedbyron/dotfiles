: ${ZUNPLUG_HOME:=${XDG_CACHE_HOME:-~/.cache}/zunplug}
: ${ZUNPLUGDIR:=${ZSH_CUSTOM:-${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}}/plugins}
typeset -gHa _alite_zopts=(extended_glob glob_dots no_monitor)

function _zunplug-clone {
  emulate -L zsh; setopt local_options $_alite_zopts
  local repo plugdir; local -Ua repos

  for repo in ${${(M)@:#*/*}:#/*}; do
    repo=${(@j:/:)${(@s:/:)repo}[1,2]}
    [[ -e $ZUNPLUG_HOME/$repo ]] || repos+=$repo
  done

  for repo in $repos; do
    plugdir=$ZUNPLUG_HOME/$repo
    if [[ ! -d $plugdir ]]; then
      echo "Cloning $repo..."
      (
        command git clone -q --depth 1 --recursive --shallow-submodules \
          ${ZUNPLUG_GHURL:-https://github.com/}$repo $plugdir
        _zunplug-compile $plugdir
      ) &
    fi
  done
  wait
}

function _zunplug-load {
  source <(_zunplug-script $@)
}

function _zunplug-script {
  emulate -L zsh; setopt local_options $_alite_zopts

  local kind
  while (( $# )); do
    case $1 in
      -k|--kind)  shift; kind=$1 ;;
      -*)         echo >&2 "Invalid argument $1" && return 2 ;;
      *)          break ;;
    esac
    shift
  done

  local plugin src="source" inits=()
  (( ! $+functions[zsh-defer] )) || src="zsh-defer ."
  for plugin in $@; do
    if [[ -n "$kind" ]]; then
      echo "$kind=(\$$kind $ZUNPLUG_HOME/$plugin)"
    else
      inits=(
        {$ZUNPLUGDIR,$ZUNPLUG_HOME}/$plugin/${plugin:t}.{plugin.zsh,zsh-theme,zsh,sh}(N)
        $ZUNPLUG_HOME/$plugin/*.{plugin.zsh,zsh-theme,zsh,sh}(N)
        $ZUNPLUG_HOME/$plugin(N)
        ${plugin}/*.{plugin.zsh,zsh-theme,zsh,sh}(N)
        ${plugin}(N)
      )
      (( $#inits )) || { echo >&2 "No plugin init found for $plugin" && continue }
      plugin=$inits[1]
      echo "fpath=(\$fpath $plugin:h)"
      echo "$src $plugin"
      [[ "$plugin:h:t" == zsh-defer ]] && src="zsh-defer ."
    fi
  done
}

function _zunplug-update {
  emulate -L zsh; setopt local_options $_alite_zopts
  local plugdir oldsha newsha
  for plugdir in $ZUNPLUG_HOME/*/*/.git(N/); do
    plugdir=${plugdir:A:h}
    echo "Updating ${plugdir:h:t}/${plugdir:t}..."
    (
      oldsha=$(command git -C $plugdir rev-parse --short HEAD)
      command git -C $plugdir pull --quiet --ff --depth 1 --rebase --autostash
      newsha=$(command git -C $plugdir rev-parse --short HEAD)
      [[ $oldsha == $newsha ]] || echo "Plugin updated: ${plugdir:t} ($oldsha -> $newsha)"
    ) &
  done
  wait
  _zunplug-compile
  echo "Update complete."
}

function _zunplug-compile {
  emulate -L zsh; setopt local_options $_alite_zopts
  autoload -Uz zrecompile
  local zfile
  for zfile in ${1:-ZUNPLUG_HOME}/**/*.zsh{,-theme}(N); do
    [[ $zfile != */test-data/* ]] || continue
    zrecompile -pq "$zfile"
  done
}

function _zunplug-help {
  cat <<EOF
USAGE
  zunplug <command> [args]

COMMANDS
  load    [repo] ...  Clone the specified plugin(s) [aliases: l]
  compile             Recompile plugins             [aliases: c, comp]
  update              Update and recompile plugins  [aliases: u, up]
EOF
}

function zunplug {
  if (( $# == 0 )); then
    _zunplug-help
    return 1
  fi

  case $1 in
    l|load)
      _zunplug-load $@[2,-1]
      ;;
    c|comp|compile)
      _zunplug-compile
      ;;
    u|up|update)
      _zunplug-update
      ;;
    '-h'|'--help')
      _zunplug-help
      ;;
    *)
      _zunplug-help
      return 2
      ;;
  esac

  return $?
}
