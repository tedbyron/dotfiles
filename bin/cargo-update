#!/usr/bin/env nix
#!nix shell nixpkgs#bash --command bash
# shellcheck shell=bash
#
# Find outdated cargo binaries (cargo install --list, cargo search) and install
# new versions (cargo install -f).

typeset -A current_map
typeset -A next_map
typeset -A install

typeset -r green='\033[32m'   # foreground green
typeset -r yellow='\033[33m'  # foreground yellow
typeset -r nt='\033[0m'       # normal text

# Store currently installed binary names and versions in `current_map`.
current_versions() {
    local -a arr
    readarray -t arr < <(cargo install --list \
        | awk '/^[[:alnum:]]/{print $1 "\n" $2}')
    for (( i=0; i < ${#arr[@]}; i+=2 )); do
        name=${arr[$i]}
        vers=${arr[$(( i+1 ))]}
        vers=${vers//[!0-9.]/}
        current_map[${name}]=${vers}
    done
}

# Store `cargo search` versions in `next_map`.
next_versions() {
    for crate in "${!current_map[@]}"; do
        vers=$(cargo search --limit 1 "$crate")
        name=$(awk 'NR==1{print $1}' <<<"$vers")
        if [[ -n "$vers" && $crate == "$name" ]]; then
            vers=$(awk 'NR==1{print $3}' <<<"$vers")
            vers=${vers//[!0-9.]/}
        else
            vers=${current_map[$crate]}
        fi
        next_map[$crate]=$vers
    done
}

# Compare versions and add outdated to `install`; echo outdated and versions.
compare_and_echo() {
    local vers_next
    for crate in "${!current_map[@]}"; do
        vers=${current_map[$crate]}
        vers_next=${next_map[$crate]}
        if [[ $vers != "$vers_next" ]]; then
            install[$crate]=$vers_next
        fi
    done
    for crate in "${!install[@]}"; do
        echo -e "$crate $yellow${current_map[$crate]}$nt \
-> $green${install[$crate]}$nt"
    done | column -t
}

# Prompt to install outdated crates in `install`.
prompt_and_install() {
    for crate in "${!install[@]}"; do
        vers=${install[$crate]}
        echo -en "Install $crate $green$vers$nt? [y/N]: "
        read -rp '' y_n
        case $y_n in
            [yY]*)
                read -rp "Extra args for 'cargo install': " eargs
                case "$eargs" in
                    '') cargo install -f "$crate" || exit 1 ;;
                    *) cargo install -f "$crate" "$eargs" || exit 1 ;;
                esac
                ;;
        esac
    done
}

# Install all outdated crates in `install` without prompting.
prompt_and_install_y() {
    for crate in "${!install[@]}"; do
        cargo install -f "$crate" || exit 1
    done
}

main() {
    current_versions
    next_versions
    compare_and_echo

    if [[ $# == 1 && $1 =~ -y ]]; then
        prompt_and_install_y
    else
        prompt_and_install
    fi
}

main "$@"
