#!/usr/bin/env bash
# install or update vim plugins

declare -rA plugins=(
  ['dracula']='https://github.com/dracula/vim'
  ['lightline']='https://github.com/itchyny/lightline.vim'
  ['sleuth']='https://github.com/tpope/vim-sleuth'
  ['fugitive']='https://github.com/tpope/vim-surround'
  ['surround']='https://github.com/tpope/vim-fugitive'
  ['vim-gitgutter']='https://github.com/airblade/vim-gitgutter'
  ['nerdcommenter']='https://github.com/preservim/nerdcommenter'
)

declare -rA setup=(
  ['sleuth']='vim -u NONE -c "helptags sleuth/doc" -c q'
  ['fugitive']='vim -u NONE -c "helptags fugitive/doc" -c q'
  ['surround']='vim -u NONE -c "helptags surround/doc" -c q'
  ['vim-gitgutter']='vim -u NONE -c "helptags vim-gitgutter/doc" -c q'
)

declare -r plugins_dir="${HOME}/.vim/pack/plugins/start"
declare -r trash_dir="${HOME}/.Trash"

declare -r red='\033[31m' # foreground red
declare -r mag='\033[34m' # foreground magenta
declare -r nt='\033[0m'   # normal text

# check if git is installed
check_git() {
  if [[ ! -x "$(command -v git)" ]]; then
    err_msg 'This script requires git' 1
  fi
}

# check if plugins_dir exists or create it
check_plugin_dir() {
  if [[ ! -d "${plugins_dir}" ]]; then
    mkdir -p "${plugins_dir}" || err_msg "mkdir -p ${plugins_dir} failed" 1
  fi
}

# remove plugin dirs for clean install
clean_plugins() {
  for plugin in "${!plugins[@]}"; do
    echo "Removing ${mag}${plugin}${nt}â€¦"
    if [[ -d "${trash_dir:?}/${plugin:?}" ]]; then
      rm -rf "${trash_dir:?}/${plugin:?}"
    fi
    mv "${plugins_dir}/${plugin}" "${trash_dir}"
  done
  echo
}

# install plugins
install_plugins() {
  for plugin in "${!plugins[@]}"; do
    echo -e "${mag}${plugin}${nt}"
    git clone "${plugins[${plugin}]}" "${plugins_dir}/${plugin}"
  done

  for plugin in "${!setup[@]}"; do
    eval "${setup[${plugin}]}"
  done
}

# update plugins
update_plugins() {
  local dir
  for plugin in "${!plugins[@]}"; do
    dir="${plugins_dir}/${plugin}"
    echo -e "${mag}${plugin}${nt}"
    cd "${dir}" || { err_msg "cd ${dir} failed"; break; }
    git fetch
    git pull
  done
}

# return an error message and maybe exit
err_msg() {
  echo -e "${red}ERR${nt}: $1." >&2
  if (($# > 1)); then
    exit 1
  fi
}

main() {
  local -i exit_code=0
  set -E
  trap '(( exit_code++ ))' ERR

  if (($# >= 1 && $# <= 2)); then
    case "$1" in
      'install')
        check_git
        check_plugin_dir
        if (($# == 2)); then
          if [[ "${2,,}" == '-f' || "${2,,}" == '--force' ]]; then
            clean_plugins
          else
            err_msg "unknown argument '$2'" 1
          fi
        fi
        install_plugins
        ;;
      'update')
        check_git
        check_plugin_dir
        update_plugins
        ;;
      *)
        err_msg "unknown argument '$1'" 1
        ;;
    esac
  else
    err_msg "$0 requires 1-2 arguments" 1
  fi

  exit "${exit_code}"
}

main "$@"
